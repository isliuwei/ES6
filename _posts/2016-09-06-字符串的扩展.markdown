---
layout: post
title:  "字符串的扩展"
date:   2016-09-06 15:35:56 +0800
categories: jekyll update
---
## 1.1 字符的 Unicode 表示法

Javascript 允许采用 `\uxxxx` 或者 `\u{xxxx}` 形式表示一个字符,其中 `xxxx` 表示字符的码点。

{% highlight javascript %}
    
    var unicodeString = "\u0045\u0053\u0036\u0020\u6807\u51c6\u5165\u95e8";
    
    var unicodeString1 = "\u{962e}\u{4e00}\u{5cf0}";
    
    console.log(unicodeString);     //显示 ES6 标准入门
    
    console.log(unicodeString1);     //显示 阮一峰
    
{% endhighlight %}


## 1.2 codePointAt( )  charCodeAt( )

`????......`



## 1.3 String.fromCodePoint( )

`???? String.fromCodePoint()`是String的静态方法，该方法使用指定的`unicode`参数返回一个`primitive的字符串`。

{% highlight javascript %}
    
    console.log(String.fromCodePoint("\u0045\u0053\u0036\u0020\u6807\u51c6\u5165\u95e8"));     //显示 ES6 标准入门
    
    console.log(String.fromCodePoint("\u{962e}\u{4e00}\u{5cf0}"));     //显示 阮一峰
    
{% endhighlight %}


## 1.3 字符串的遍历器接口

`ES6`为字符串添加了`遍历器接口`,是字符串可以由`for...of`循环遍历。

{% highlight javascript %}
    
    for(let code of 'ES6标准入门'){
        console.log(code);  
    }
    
    //显示
    // E
    // S
    // 6
    // 标
    // 准
    // 入
    // 门
    
{% endhighlight %}


## 1.4 charAt( )

`charAt()` 方法返回字符串中指定位置的字符。

>字符串中的字符从左向右索引，第一个字符的索引值为 0，最后一个字符（假设该字符位于字符串 stringName 中）的索引值为 stringName.length - 1。 如果指定的 index 值超出了该范围，则返回一个空字符串。


## 1.5 normalize( )

`ES6`为字符串实例提供了 normalize 方法,用来将字符的不同表示方法统一为同样的形式,这称为Unicode正规化。



## 1.6 includes( ), startsWith( ), endsWith( ) 

传统上,Javascript中只有`indexOf()`方法可以用来确定一个字符串是否包含在另一个字符串中。

✔️ **includes( )**: 返回布尔值, 表示是否找到了参数字符串。includes() 是区分大小写的。

✔️ **startsWith( )**: 返回布尔值, 表示参数字符串是否在源字符串的头部。

✔️ **endsWith( )**: 返回布尔值, 表示参数字符串是否在源字符串的尾部。

{% highlight javascript %}
    
    var s = "Hello world!";
    
    console.log( s.includes('Hello') );         //显示 true
    
    console.log( s.startsWith('He') );          //显示 true
    
    console.log( s.endsWith('!') );             //显示 true
    
    console.log( s.endsWith('d!') );            //显示 true
    
{% endhighlight %}

>以上 3 个方法都支持第 2 个参数,表示开始搜索的位置。

{% highlight javascript %}
    
    var s = "Hello world!";
    
    console.log( s.startsWith('world', 6) );    //显示 true
    
    console.log( s.endsWith('Hello', 5) );      //显示 true
    
    console.log( s.endsWith('Hello', 6) );      //显示 false
    
{% endhighlight %}



## 1.6 repeat( ) 

`repeat` 方法返回一个`新字符串`,表示将原字符串重复 n 次。

`语法:`  `var newString = string.repeat(count);`

`参数:` `count 介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复了多少遍原字符串。`

`返回值:` `新的重复拷贝给定字符串若干次数的字符串。`

{% highlight javascript %}
    
    console.log( 'x'.repeat(3) );           //显示 'xxx'   
    
    console.log( 'hello'.repeat(2) );       //显示 'hellohello'
    
    console.log( 'world'.repeat(0) );       //显示 ''
     
    //如果参数是小数,会被取整
    console.log( 'ha'.repeat(2.9) );        //显示 'hahaha'
    
    //如果参数是负数或者Infinity,会报错
    console.log( 'ha'.repeat(-1) );         //报错: Uncaught RangeError: Invalid count value(…)
    console.log( 'ha'.repeat(Infinity) );   //报错: Uncaught RangeError: Invalid count value(…)
    
    //如果参数是 0 到 -1 之间的小数,则等同于 0
    console.log('node'.repeat(-0.9) );       //显示 ''
    
    //如果参数是 NaN 等同于 0
    console.log('node'.repeat(NaN) );        //显示 ''
    
    //如果参数是字符串,则会先转换成数字
    console.log('node'.repeat('2') );        //显示 'nodenode'
    
        
    
{% endhighlight %}



